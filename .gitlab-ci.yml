variables:
    GIT_STRATEGY: none
    DOCKER_IMAGE: webpage:all

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

stages:
    - build
    - test
    - release
    - cleanup


build_linter:
    stage: build
    variables:
        GIT_STRATEGY: clone
        GIT_DEPTH: 0
    script: docker build -t ${DOCKER_IMAGE} .

test_mkdocs:
    stage: test
    script: docker run ${DOCKER_IMAGE}

test_linter_preview:
    stage: test
    script:
        - docker run --rm -w /src -e CI_MERGE_REQUEST_TARGET_BRANCH_NAME ${DOCKER_IMAGE}
          doc.zih.tu-dresden.de/util/lint-changes.sh
    only: [ merge_requests ]

test_linkchecker_preview:
    stage: test
    script:
        - docker run --rm -w /src -e CI_MERGE_REQUEST_TARGET_BRANCH_NAME ${DOCKER_IMAGE}
          doc.zih.tu-dresden.de/util/check-links.sh
    only: [ merge_requests ]

test_linter:
    stage: test
    script: docker run --rm ${DOCKER_IMAGE} markdownlint docs
    only: [ main ]

test_linkchecker:
    stage: test
    script:
        - docker run --rm ${DOCKER_IMAGE}
          bash -c "find docs -type f -name '*.md' | xargs -L1 markdown-link-check --quiet"
    only: [ main ]

release_preview:
    stage: release
    script:
        - docker run --rm -v /var/www/html/preview:/mnt ${DOCKER_IMAGE} mkdocs build --site-dir /mnt
    only: [ preview ]

release:
    stage: release
    script:
        - docker run --rm -v /var/www/html/hpc-wiki:/mnt ${DOCKER_IMAGE} mkdocs build --site-dir /mnt
    only: [ main ]

cleanup_docker:
    stage: cleanup
    script:
        - docker system prune --force
