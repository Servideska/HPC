variables:
    GIT_STRATEGY: none
    DOCKER_IMAGE: webpage:$CI_PIPELINE_IID

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

stages:
    - build
    - test
    - release
    - cleanup


Build Linter:
    stage: build
    variables:
        GIT_STRATEGY: clone
        GIT_DEPTH: 0
    script: docker build -t "${DOCKER_IMAGE}" .

Test mkdocs:
    stage: test
    script: docker run ${DOCKER_IMAGE}

Lint changed md-files:
    stage: test
    script:
        - docker run --rm -w /src -e CI_MERGE_REQUEST_TARGET_BRANCH_NAME "${DOCKER_IMAGE}"
          doc.zih.tu-dresden.de/util/lint-changes.sh
    only: [ merge_requests ]

Check links for changed md-files:
    stage: test
    script:
        - docker run --rm -w /src -e CI_MERGE_REQUEST_TARGET_BRANCH_NAME "${DOCKER_IMAGE}"
          doc.zih.tu-dresden.de/util/check-links.sh
    only: [ merge_requests ]

Lint md-files:
    stage: test
    script: docker run --rm "${DOCKER_IMAGE}" markdownlint docs
    only: [ main, preview ]

Check links for md-files:
    stage: test
    script:
        - docker run --rm "${DOCKER_IMAGE}"
          bash -c "find docs -type f -name '*.md' | xargs -L1 markdown-link-check --quiet"
    only: [ main, preview ]

Release preview branch:
    stage: release
    script:
        - docker run --rm -v /var/www/html/preview:/mnt "${DOCKER_IMAGE}" mkdocs build --site-dir /mnt
    only: [ preview ]

Release:
    stage: release
    script:
        - docker run --rm -v /var/www/html/hpc-wiki:/mnt "${DOCKER_IMAGE}" mkdocs build --site-dir /mnt
    only: [ main ]

Cleanup docker:
    stage: cleanup
    script:
        - docker rmi "${DOCKER_IMAGE}"
        - docker system prune --force
    when: always
